{"version":3,"file":"CheckoutPage-BypxhLcr.js","sources":["../../src/api/CheckoutService.js","../../src/pages/public/CheckoutPage.jsx"],"sourcesContent":["// services.js - API service functions for checkout\r\n\r\nconst BASE_URL = 'https://leksycosmetics.com';\r\n\r\n/**\r\n * Formats price to Nigerian Naira currency format\r\n * @param {number} price - Price in kobo or naira\r\n * @returns {string} Formatted price string\r\n */\r\nexport const formatPrice = (price) => {\r\n  return `â‚¦${parseFloat(price).toLocaleString('en-NG', {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  })}`;\r\n};\r\n\r\n/**\r\n * Prepares cart data for API submission\r\n * @param {Array} cart - Cart items array\r\n * @returns {Array} Formatted cart data for API\r\n */\r\nexport const prepareCartForAPI = (cart) => {\r\n  return cart.map(item => ({\r\n    product_id: item.id,\r\n    quantity: item.quantity\r\n  }));\r\n};\r\n\r\n/**\r\n * Validates checkout form data\r\n * @param {Object} formData - Form data object\r\n * @param {string} deliveryMethod - Delivery method ('address' or 'pickup')\r\n * @returns {Object} Validation errors object\r\n */\r\nexport const validateCheckoutForm = (formData, deliveryMethod) => {\r\n  const errors = {};\r\n  \r\n  if (!formData.name.trim()) errors.name = 'Name is required';\r\n  if (!formData.email.trim()) errors.email = 'Email is required';\r\n  else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) errors.email = 'Email is invalid';\r\n  if (!formData.phone.trim()) errors.phone = 'Phone number is required';\r\n  \r\n  if (deliveryMethod === 'address') {\r\n    if (!formData.state.trim()) errors.state = 'State is required';\r\n    if (!formData.city.trim()) errors.city = 'City is required';\r\n    if (!formData.street_address.trim()) errors.street_address = 'Street address is required';\r\n  }\r\n  \r\n  if (!formData.agreeToTerms) errors.agreeToTerms = 'You must agree to the terms and conditions';\r\n  \r\n  return errors;\r\n};\r\n\r\n/**\r\n * Initiates checkout process with the API\r\n * @param {Object} formData - Customer form data\r\n * @param {string} deliveryMethod - Delivery method ('address' or 'pickup')\r\n * @param {Array} cart - Cart items\r\n * @param {string} successRedirectUrl - URL to redirect after successful payment\r\n * @returns {Promise<Object>} API response\r\n */\r\nexport const initiateCheckout = async (formData, deliveryMethod, cart, successRedirectUrl) => {\r\n  try {\r\n    // Prepare cart data according to API specification\r\n    const cartData = prepareCartForAPI(cart);\r\n    \r\n    // Prepare form data - ALWAYS include all required fields\r\n    const requestData = new FormData();\r\n    requestData.append('name', formData.name.trim());\r\n    requestData.append('email', formData.email.trim());\r\n    requestData.append('phone', formData.phone.trim());\r\n    requestData.append('delivery_method', deliveryMethod);\r\n    requestData.append('cart', JSON.stringify(cartData));\r\n    requestData.append('success_redirect', successRedirectUrl);\r\n    \r\n    // ALWAYS include address fields - use appropriate values based on delivery method\r\n    if (deliveryMethod === 'address') {\r\n      requestData.append('state', formData.state.trim());\r\n      requestData.append('city', formData.city.trim());\r\n      requestData.append('street_address', formData.street_address.trim());\r\n    } else {\r\n      // For pickup, provide default values that satisfy API requirements\r\n      requestData.append('state', 'FCT'); // Use a valid state\r\n      requestData.append('city', 'Store Pickup');\r\n      requestData.append('street_address', 'Store Pickup - No Address Required');\r\n    }\r\n    \r\n    // Add notes if provided\r\n    if (formData.notes && formData.notes.trim()) {\r\n      requestData.append('notes', formData.notes.trim());\r\n    }\r\n\r\n    // Build API URL\r\n    const apiUrl = `${BASE_URL}/api/checkout/initiate`;\r\n    \r\n    // Log request details for debugging\r\n    console.log('Initiating checkout with URL:', apiUrl);\r\n    console.log('Request data:', {\r\n      name: formData.name.trim(),\r\n      email: formData.email.trim(),\r\n      phone: formData.phone.trim(),\r\n      delivery_method: deliveryMethod,\r\n      state: deliveryMethod === 'address' ? formData.state.trim() : 'FCT',\r\n      city: deliveryMethod === 'address' ? formData.city.trim() : 'Store Pickup',\r\n      street_address: deliveryMethod === 'address' ? formData.street_address.trim() : 'Store Pickup - No Address Required',\r\n      cart: JSON.stringify(cartData),\r\n      success_redirect: successRedirectUrl,\r\n      notes: formData.notes?.trim() || ''\r\n    });\r\n\r\n    // Make API request using FormData in body instead of URL parameters\r\n    const response = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      body: requestData, // Send as form data in body, not URL parameters\r\n      // Note: Don't set Content-Type header when using FormData - browser sets it automatically\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('API Error Response:', errorText);\r\n      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('API Response:', result);\r\n    \r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error('Checkout initiation error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Alternative implementation using URLSearchParams for form-encoded data\r\n * Use this if the API specifically expects application/x-www-form-urlencoded\r\n */\r\nexport const initiateCheckoutAlternative = async (formData, deliveryMethod, cart, successRedirectUrl) => {\r\n  try {\r\n    const cartData = prepareCartForAPI(cart);\r\n    \r\n    // Use URLSearchParams for proper form encoding\r\n    const requestData = new URLSearchParams();\r\n    requestData.append('name', formData.name.trim());\r\n    requestData.append('email', formData.email.trim());\r\n    requestData.append('phone', formData.phone.trim());\r\n    requestData.append('delivery_method', deliveryMethod);\r\n    requestData.append('cart', JSON.stringify(cartData));\r\n    requestData.append('success_redirect', successRedirectUrl);\r\n    \r\n    // ALWAYS include address fields\r\n    if (deliveryMethod === 'address') {\r\n      requestData.append('state', formData.state.trim());\r\n      requestData.append('city', formData.city.trim());\r\n      requestData.append('street_address', formData.street_address.trim());\r\n    } else {\r\n      requestData.append('state', 'FCT');\r\n      requestData.append('city', 'Store Pickup');\r\n      requestData.append('street_address', 'Store Pickup - No Address Required');\r\n    }\r\n    \r\n    if (formData.notes && formData.notes.trim()) {\r\n      requestData.append('notes', formData.notes.trim());\r\n    }\r\n\r\n    const apiUrl = `${BASE_URL}/api/checkout/initiate`;\r\n    \r\n    console.log('Initiating checkout with URL:', apiUrl);\r\n    console.log('Request body:', requestData.toString());\r\n\r\n    const response = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: requestData.toString()\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('API Error Response:', errorText);\r\n      throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('API Response:', result);\r\n    \r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error('Checkout initiation error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Stores order details in memory for success page\r\n * @param {Object} formData - Customer form data\r\n * @param {string} deliveryMethod - Delivery method\r\n * @param {Array} cart - Cart items\r\n * @param {number} totalPrice - Total price before shipping\r\n * @param {number} shipping - Shipping cost\r\n * @param {number} finalTotal - Final total including shipping\r\n */\r\nexport const storeOrderDetails = (formData, deliveryMethod, cart, totalPrice, shipping, finalTotal) => {\r\n  window.pendingOrderDetails = {\r\n    customerInfo: {\r\n      name: formData.name,\r\n      email: formData.email,\r\n      phone: formData.phone\r\n    },\r\n    deliveryInfo: {\r\n      method: deliveryMethod,\r\n      address: deliveryMethod === 'address' ? formData.street_address : 'Store Pickup',\r\n      city: deliveryMethod === 'address' ? formData.city : 'N/A',\r\n      state: deliveryMethod === 'address' ? formData.state : 'N/A'\r\n    },\r\n    orderSummary: {\r\n      items: cart,\r\n      subtotal: totalPrice,\r\n      shipping: shipping,\r\n      total: finalTotal\r\n    },\r\n    notes: formData.notes || ''\r\n  };\r\n};\r\n\r\n/**\r\n * Nigerian states list for form dropdown\r\n */\r\nexport const nigerianStates = [\r\n  'Abia', 'Adamawa', 'Akwa Ibom', 'Anambra', 'Bauchi', 'Bayelsa', 'Benue', 'Borno', \r\n  'Cross River', 'Delta', 'Ebonyi', 'Edo', 'Ekiti', 'Enugu', 'FCT', 'Gombe', \r\n  'Imo', 'Jigawa', 'Kaduna', 'Kano', 'Katsina', 'Kebbi', 'Kogi', 'Kwara', \r\n  'Lagos', 'Nasarawa', 'Niger', 'Ogun', 'Ondo', 'Osun', 'Oyo', 'Plateau', \r\n  'Rivers', 'Sokoto', 'Taraba', 'Yobe', 'Zamfara'\r\n];\r\n\r\n/**\r\n * Calculates shipping cost based on delivery method\r\n * @param {string} deliveryMethod - Delivery method ('address' or 'pickup')\r\n * @returns {number} Shipping cost in Naira\r\n */\r\nexport const calculateShipping = (deliveryMethod) => {\r\n  return deliveryMethod === 'pickup' ? 0 : 5000; // Fixed shipping cost\r\n};\r\n\r\n/**\r\n * Generates success redirect URL\r\n * @returns {string} Success redirect URL\r\n */\r\nexport const getSuccessRedirectUrl = () => {\r\n  return `${window.location.origin}/checkout/checkout-success`;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useCart } from '../../hooks/useCart';\r\nimport Breadcrumb from '../../components/common/Breadcrumb';\r\nimport Button from '../../components/common/Button';\r\nimport Notification from '../../components/common/Notification';\r\nimport { \r\n  formatPrice, \r\n  validateCheckoutForm, \r\n  initiateCheckout, \r\n  storeOrderDetails, \r\n  nigerianStates, \r\n  calculateShipping, \r\n  getSuccessRedirectUrl \r\n} from '../../api/CheckoutService';\r\n\r\nconst CheckoutPage = () => {\r\n  const { cart, totalPrice, clearCart } = useCart();\r\n  const navigate = useNavigate();\r\n  const [notification, setNotification] = useState(null);\r\n  const [isProcessingOrder, setIsProcessingOrder] = useState(false);\r\n  const [deliveryMethod, setDeliveryMethod] = useState('address');\r\n  \r\n  // Form state matches API requirements\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    state: '',\r\n    city: '',\r\n    street_address: '',\r\n    notes: '',\r\n    agreeToTerms: false\r\n  });\r\n  \r\n  const [formErrors, setFormErrors] = useState({});\r\n  const shipping = calculateShipping(deliveryMethod);\r\n  const finalTotal = totalPrice + shipping;\r\n  const SUCCESS_REDIRECT_URL = getSuccessRedirectUrl();\r\n\r\n  useEffect(() => {\r\n    if (cart.length === 0) {\r\n      navigate('/cart');\r\n    }\r\n  }, [cart, navigate]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    });\r\n    \r\n    if (formErrors[name]) {\r\n      setFormErrors({\r\n        ...formErrors,\r\n        [name]: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeliveryMethodChange = (method) => {\r\n    setDeliveryMethod(method);\r\n    if (method === 'pickup') {\r\n      const newErrors = { ...formErrors };\r\n      delete newErrors.state;\r\n      delete newErrors.city;\r\n      delete newErrors.street_address;\r\n      setFormErrors(newErrors);\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors = validateCheckoutForm(formData, deliveryMethod);\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      setNotification({\r\n        type: 'error',\r\n        message: 'Please fill in all required fields correctly'\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsProcessingOrder(true);\r\n      \r\n      const result = await initiateCheckout(formData, deliveryMethod, cart, SUCCESS_REDIRECT_URL);\r\n      \r\n      if (result.code === 200 && result.authorization_url) {\r\n        // Store order details in memory for the success page\r\n        storeOrderDetails(formData, deliveryMethod, cart, totalPrice, shipping, finalTotal);\r\n\r\n        setNotification({\r\n          type: 'success',\r\n          message: 'Redirecting to payment gateway...'\r\n        });\r\n\r\n        // Clear cart before redirecting to payment\r\n        clearCart();\r\n\r\n        // Small delay to show the success message\r\n        setTimeout(() => {\r\n          window.location.href = result.authorization_url;\r\n        }, 1000);\r\n        \r\n      } else {\r\n        throw new Error(result.message || 'Failed to initiate checkout');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Checkout initiation error:', error);\r\n      setNotification({\r\n        type: 'error',\r\n        message: error.message || 'Failed to initiate checkout. Please try again.'\r\n      });\r\n    } finally {\r\n      setIsProcessingOrder(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (notification) {\r\n      const timer = setTimeout(() => {\r\n        setNotification(null);\r\n      }, 5000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [notification]);\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-8\">\r\n      {notification && (\r\n        <Notification \r\n          type={notification.type} \r\n          message={notification.message} \r\n          onClose={() => setNotification(null)} \r\n        />\r\n      )}\r\n      \r\n      <Breadcrumb \r\n        items={[\r\n          { label: 'Home', path: '/' },\r\n          { label: 'Cart', path: '/cart' },\r\n          { label: 'Checkout', path: '/checkout' }\r\n        ]} \r\n      />\r\n      \r\n      <h1 className=\"text-3xl font-bold mb-8 text-center text-gray-800\">Checkout</h1>\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\r\n        {/* Billing Information Form */}\r\n        <div className=\"lg:col-span-2\">\r\n          <form onSubmit={handleSubmit}>\r\n            {/* Delivery Method Selection */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Delivery Method</h2>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                <div \r\n                  className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\r\n                    deliveryMethod === 'address' \r\n                      ? 'border-pink-500 bg-pink-50' \r\n                      : 'border-gray-200 hover:border-gray-300'\r\n                  }`}\r\n                  onClick={() => handleDeliveryMethodChange('address')}\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"deliveryMethod\"\r\n                      value=\"address\"\r\n                      checked={deliveryMethod === 'address'}\r\n                      onChange={() => handleDeliveryMethodChange('address')}\r\n                      className=\"h-4 w-4 text-pink-600 focus:ring-pink-500\"\r\n                    />\r\n                    <div className=\"ml-3\">\r\n                      <div className=\"text-sm font-medium text-gray-900\">\r\n                        Home Delivery\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        Delivery to your address ({formatPrice(5000)})\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div \r\n                  className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\r\n                    deliveryMethod === 'pickup' \r\n                      ? 'border-pink-500 bg-pink-50' \r\n                      : 'border-gray-200 hover:border-gray-300'\r\n                  }`}\r\n                  onClick={() => handleDeliveryMethodChange('pickup')}\r\n                >\r\n                  <div className=\"flex items-center\">\r\n                    <input\r\n                      type=\"radio\"\r\n                      name=\"deliveryMethod\"\r\n                      value=\"pickup\"\r\n                      checked={deliveryMethod === 'pickup'}\r\n                      onChange={() => handleDeliveryMethodChange('pickup')}\r\n                      className=\"h-4 w-4 text-pink-600 focus:ring-pink-500\"\r\n                    />\r\n                    <div className=\"ml-3\">\r\n                      <div className=\"text-sm font-medium text-gray-900\">\r\n                        Store Pickup\r\n                      </div>\r\n                      <div className=\"text-sm text-gray-500\">\r\n                        Pick up from our store (Free)\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Customer Information */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Customer Information</h2>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n                <div className=\"md:col-span-2\">\r\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Full Name <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    value={formData.name}\r\n                    onChange={handleInputChange}\r\n                    className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                      formErrors.name ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"Your full name\"\r\n                    disabled={isProcessingOrder}\r\n                    required\r\n                  />\r\n                  {formErrors.name && (\r\n                    <p className=\"mt-1 text-sm text-red-500\">{formErrors.name}</p>\r\n                  )}\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Email <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    value={formData.email}\r\n                    onChange={handleInputChange}\r\n                    className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                      formErrors.email ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"your@email.com\"\r\n                    disabled={isProcessingOrder}\r\n                    required\r\n                  />\r\n                  {formErrors.email && (\r\n                    <p className=\"mt-1 text-sm text-red-500\">{formErrors.email}</p>\r\n                  )}\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Phone <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"tel\"\r\n                    id=\"phone\"\r\n                    name=\"phone\"\r\n                    value={formData.phone}\r\n                    onChange={handleInputChange}\r\n                    className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                      formErrors.phone ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"+234 8012345678\"\r\n                    disabled={isProcessingOrder}\r\n                    required\r\n                  />\r\n                  {formErrors.phone && (\r\n                    <p className=\"mt-1 text-sm text-red-500\">{formErrors.phone}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Delivery Address - Only show if delivery method is address */}\r\n            {deliveryMethod === 'address' && (\r\n              <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Delivery Address</h2>\r\n                \r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\r\n                  <div>\r\n                    <label htmlFor=\"state\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      State <span className=\"text-red-500\">*</span>\r\n                    </label>\r\n                    <select\r\n                      id=\"state\"\r\n                      name=\"state\"\r\n                      value={formData.state}\r\n                      onChange={handleInputChange}\r\n                      className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                        formErrors.state ? 'border-red-500' : 'border-gray-300'\r\n                      }`}\r\n                      disabled={isProcessingOrder}\r\n                      required\r\n                    >\r\n                      <option value=\"\">Select State</option>\r\n                      {nigerianStates.map(state => (\r\n                        <option key={state} value={state}>{state}</option>\r\n                      ))}\r\n                    </select>\r\n                    {formErrors.state && (\r\n                      <p className=\"mt-1 text-sm text-red-500\">{formErrors.state}</p>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label htmlFor=\"city\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      City <span className=\"text-red-500\">*</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"city\"\r\n                      name=\"city\"\r\n                      value={formData.city}\r\n                      onChange={handleInputChange}\r\n                      className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                        formErrors.city ? 'border-red-500' : 'border-gray-300'\r\n                      }`}\r\n                      placeholder=\"Your city\"\r\n                      disabled={isProcessingOrder}\r\n                      required\r\n                    />\r\n                    {formErrors.city && (\r\n                      <p className=\"mt-1 text-sm text-red-500\">{formErrors.city}</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                \r\n                <div className=\"mb-6\">\r\n                  <label htmlFor=\"street_address\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                    Street Address <span className=\"text-red-500\">*</span>\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"street_address\"\r\n                    name=\"street_address\"\r\n                    value={formData.street_address}\r\n                    onChange={handleInputChange}\r\n                    className={`w-full px-4 py-2 border rounded-md focus:ring-pink-500 focus:border-pink-500 ${\r\n                      formErrors.street_address ? 'border-red-500' : 'border-gray-300'\r\n                    }`}\r\n                    placeholder=\"Your full address\"\r\n                    disabled={isProcessingOrder}\r\n                    required\r\n                  />\r\n                  {formErrors.street_address && (\r\n                    <p className=\"mt-1 text-sm text-red-500\">{formErrors.street_address}</p>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Additional Info */}\r\n            <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Additional Info</h2>\r\n              \r\n              <div>\r\n                <label htmlFor=\"notes\" className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                  Order Notes (Optional)\r\n                </label>\r\n                <textarea\r\n                  id=\"notes\"\r\n                  name=\"notes\"\r\n                  value={formData.notes}\r\n                  onChange={handleInputChange}\r\n                  rows=\"4\"\r\n                  className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-pink-500 focus:border-pink-500\"\r\n                  placeholder=\"Notes about your order, e.g. special delivery instructions\"\r\n                  disabled={isProcessingOrder}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n        \r\n        {/* Order Summary */}\r\n        <div className=\"lg:col-span-1\">\r\n          <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\r\n            <h2 className=\"text-xl font-semibold text-gray-800 mb-6\">Order Summary</h2>\r\n            \r\n            <div className=\"space-y-4 mb-6\">\r\n              {cart.map((item) => (\r\n                <div key={`${item.id}-${item.variant?.id || 'default'}`} className=\"flex items-center gap-4\">\r\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-md overflow-hidden flex-shrink-0\">\r\n                    <img \r\n                      src={item.image} \r\n                      alt={item.name} \r\n                      className=\"w-full h-full object-cover\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"flex-grow\">\r\n                    <div className=\"text-sm font-medium text-gray-800\">\r\n                      {item.name} {item.quantity > 1 && `x${item.quantity}`}\r\n                    </div>\r\n                    {item.variant && (\r\n                      <div className=\"text-xs text-gray-500\">\r\n                        {item.variant.name}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"text-sm font-medium text-gray-800\">\r\n                    {formatPrice(item.price * item.quantity)}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            \r\n            <div className=\"border-t border-gray-200 pt-4 space-y-4 mb-6\">\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">Subtotal:</span>\r\n                <span className=\"font-medium\">{formatPrice(totalPrice)}</span>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-gray-600\">\r\n                  {deliveryMethod === 'pickup' ? 'Pickup:' : 'Shipping:'}\r\n                </span>\r\n                <span className=\"font-medium\">\r\n                  {deliveryMethod === 'pickup' ? 'Free' : formatPrice(shipping)}\r\n                </span>\r\n              </div>\r\n              \r\n              <div className=\"flex justify-between text-lg font-semibold pt-2 border-t border-gray-200\">\r\n                <span>Total:</span>\r\n                <span className=\"text-pink-600\">{formatPrice(finalTotal)}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"mb-6\">\r\n              <p className=\"text-sm text-gray-600 mb-4\">\r\n                Your personal data will be used to process your order, support your experience throughout this website, and for other purposes described in our{' '}\r\n                <Link to=\"/privacy-policy\" className=\"text-pink-500 hover:text-pink-600\">\r\n                  privacy policy\r\n                </Link>.\r\n              </p>\r\n              \r\n              <div className=\"flex items-start mb-6\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"agreeToTerms\"\r\n                  name=\"agreeToTerms\"\r\n                  checked={formData.agreeToTerms}\r\n                  onChange={handleInputChange}\r\n                  className={`mt-1 mr-2 h-4 w-4 text-pink-600 focus:ring-pink-500 border-gray-300 rounded ${\r\n                    formErrors.agreeToTerms ? 'border-red-500' : ''\r\n                  }`}\r\n                  disabled={isProcessingOrder}\r\n                  required\r\n                />\r\n                <label htmlFor=\"agreeToTerms\" className=\"text-sm text-gray-600\">\r\n                  I have read and agree to the website{' '}\r\n                  <Link to=\"/terms\" className=\"text-pink-500 hover:text-pink-600\">\r\n                    terms and conditions\r\n                  </Link>{' '}\r\n                  <span className=\"text-red-500\">*</span>\r\n                </label>\r\n              </div>\r\n              {formErrors.agreeToTerms && (\r\n                <p className=\"mt-1 text-sm text-red-500 mb-4\">{formErrors.agreeToTerms}</p>\r\n              )}\r\n              \r\n              <Button\r\n                type=\"submit\"\r\n                onClick={handleSubmit}\r\n                disabled={isProcessingOrder}\r\n                className={`w-full py-3 rounded-md font-medium transition-colors ${\r\n                  isProcessingOrder\r\n                    ? 'bg-gray-400 cursor-not-allowed text-gray-200'\r\n                    : 'bg-pink-500 hover:bg-pink-600 text-white'\r\n                }`}\r\n              >\r\n                {isProcessingOrder ? (\r\n                  <div className=\"flex items-center justify-center\">\r\n                    <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                      <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                      <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                    </svg>\r\n                    Initiating Payment...\r\n                  </div>\r\n                ) : (\r\n                  `Proceed to Payment - ${formatPrice(finalTotal)}`\r\n                )}\r\n              </Button>\r\n            </div>\r\n            \r\n            <Link \r\n              to=\"/cart\" \r\n              className=\"flex items-center justify-center text-pink-500 hover:text-pink-600\"\r\n            >\r\n              <span className=\"mr-1\">Â«</span> Back to Cart\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutPage;"],"names":["BASE_URL","formatPrice","price","prepareCartForAPI","cart","item","validateCheckoutForm","formData","deliveryMethod","errors","initiateCheckout","successRedirectUrl","cartData","requestData","apiUrl","_a","response","errorText","result","error","storeOrderDetails","totalPrice","shipping","finalTotal","nigerianStates","calculateShipping","getSuccessRedirectUrl","CheckoutPage","clearCart","useCart","navigate","useNavigate","notification","setNotification","useState","isProcessingOrder","setIsProcessingOrder","setDeliveryMethod","setFormData","formErrors","setFormErrors","SUCCESS_REDIRECT_URL","useEffect","handleInputChange","e","name","value","type","checked","handleDeliveryMethodChange","method","newErrors","validateForm","handleSubmit","timer","jsxs","jsx","Notification","Breadcrumb","state","Link","Button"],"mappings":"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"}